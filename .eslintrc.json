// Referneces:
//  https://gist.github.com/nkbt/9efd4facb391edbf8048
//  https://github.com/nkbt/esnext-quickstart/blob/master/.eslintrc
{
    "env": {
      "browser": true,
      "commonjs": false,
      "es6": true,
      "mocha": true,
      "node": false
    },
    "parser": "babel-eslint",
    "plugins": [ "react" ],
    "ecmaFeatures": {
      "arrowFunctions": true,
      "binaryLiterals": true,
      "blockBindings": true,
      "classes": true,
      "defaultParams": true,
      "destructuring": true,
      "forOf": true,
      "generators": true,
      "modules": true,
      "objectLiteralComputedProperties": true,
      "objectLiteralDuplicateProperties": true,
      "objectLiteralShorthandMethods": true,
      "objectLiteralShorthandProperties": true,
      "octalLiterals": true,
      "regexUFlag": true,
      "regexYFlag": true,
      "spread": true,
      "superInFunctions": true,
      "templateStrings": true,
      "unicodeCodePointEscapes": true,
      "globalReturn": true,
      "jsx": true,
      "restParams" : true
    },

    "extends": [
      "eslint:recommended",
      "plugin:react/recommended"
    ],

    "rules": {
      // 0 = "off"
      // 1 = "warn"
      // 2 = "error"

      //
      // Variables
      //
      // These rules have to do with variable declarations.
      //
      "init-declarations": 0, // enforce or disallow variable initializations at definition
      "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope
      "no-delete-var": 2, // disallow deletion of variables (recommended)
      "no-label-var": 2, // disallow labels that share a name with a variable
      "no-restricted-globals": 0, // restrict usage of specified global variables
      "no-shadow": "warn", // disallow declaration of variables already declared in the outer scope
      "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
      "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
      "no-undef-init": 2, // disallow use of undefined when initializing variables
      "no-undefined": 2, // disallow use of undefined variable
      "no-unused-vars": ["warn", {"argsIgnorePattern": "^_", "varsIgnorePattern": "^_"}], // disallow declaration of variables that are not used in the code (recommended)
      "no-use-before-define": 2, // disallow use of variables before they are defined

      //
      // Stylistic Issues
      //
      // These rules are purely matters of style and are quite subjective.
      //
      "array-bracket-spacing": [2, "never"], // enforce spacing inside array brackets (fixable)
      "block-spacing": [2, "always"], // disallow or enforce spaces inside of single line blocks (fixable)
      "brace-style": 2, // enforce one true brace style
      "camelcase": 2, // require camel case names
      "comma-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after comma (fixable)
      "comma-style": [2, "last"], // enforce one true comma style
      "computed-property-spacing": [2, "never"], // require or disallow padding inside computed properties (fixable)
      "consistent-this": [2, "_this"], // enforce consistent naming when capturing the current execution context
      "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines (fixable)
      "func-names": 0, // require function expressions to have a name
      "func-style": 0, // enforce use of function declarations or expressions
      "id-blacklist": 0, // blacklist certain identifiers to prevent them being used
      "id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
      "id-match": 0, // require identifiers to match the provided regular expression
      "indent": [2, 2, {"SwitchCase": 1}], // specify tab or space width for your code (fixable)
      "jsx-quotes": [2, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes (fixable)
      "key-spacing": [2, {"beforeColon": false, "afterColon": true}], // enforce spacing between keys and values in object literal properties
      "keyword-spacing": [2, {"before": true, "after": true}], // enforce spacing before and after keywords (fixable)
      "linebreak-style": [2, "unix"], // disallow mixed 'LF' and 'CRLF' as linebreaks
      "lines-around-comment": [2, {"beforeBlockComment": true, "afterBlockComment": false, "afterLineComment": false}], // enforce empty lines around comments
      "max-depth": [2, 3], // specify the maximum depth that blocks can be nested
      "max-len": [0, 100, 2], // specify the maximum length of a line in your program
      "max-nested-callbacks": [2, 3], // specify the maximum depth callbacks can be nested
      "max-params": [2, 5], // limits the number of parameters that can be used in the function declaration
      "max-statements": 0, // specify the maximum number of statement allowed in a function
      "new-cap": [2, {"newIsCap": true, "capIsNew": false}], // require a capital letter for constructors
      "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
      "newline-after-var": [2, "always"], // require or disallow an empty newline after variable declarations
      "newline-per-chained-call": 0, // enforce newline after each call when chaining the calls
      "no-array-constructor": 2, // disallow use of the Array constructor
      "no-bitwise": 2, // disallow use of bitwise operators
      "no-continue": 2, // disallow use of the continue statement
      "no-inline-comments": 0, // 2=disallow comments inline after code 1=warning 0=allow
      "no-lonely-if": 2, // disallow if as the only statement in an else block
      "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation (recommended)
      "no-multiple-empty-lines": [2, {"max": 2}], // disallow multiple empty lines
      "no-negated-condition": 2, // disallow negated conditions
      "no-nested-ternary": 2, // disallow nested ternary expressions
      "no-new-object": 2, // disallow the use of the Object constructor
      "no-plusplus": 2, // disallow use of unary operators, ++ and --
      "no-restricted-syntax": [2, "WithStatement"], // disallow use of certain syntax in code
      "no-spaced-func": 2, // disallow space between function identifier and application (fixable)
      "no-ternary": 0, // disallow the use of ternary operators
      "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines (fixable)
      "no-underscore-dangle": 2, // disallow dangling underscores in identifiers
      "no-unneeded-ternary": 2, // disallow the use of ternary operators when a simpler alternative exists
      "no-whitespace-before-property": 2, // disallow whitespace before properties
      "object-curly-spacing": [0, "never"], // require or disallow padding inside curly braces (fixable)
      "one-var": [2, "never"], // require or disallow one variable declaration per function
      "one-var-declaration-per-line": 2, // require or disallow an newline around variable declarations
      "operator-assignment": [2, "never"], // require assignment operator shorthand where possible or prohibit it entirely
      "operator-linebreak": [2, "after"], // enforce operators to be placed before or after line breaks
      "padded-blocks": [0, "never"], // enforce padding within blocks
      "quote-props": [2, "as-needed"], // require quotes around object literal property names
      "quotes": [2, "single"], // specify whether backticks, double or single quotes should be used (fixable)
      "require-jsdoc": 0, // Require JSDoc comment
      "semi": ["off", "always"], // require or disallow use of semicolons instead of ASI (fixable)
      "semi-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after semicolons (fixable)
      "sort-imports": 0, // sort import declarations within module
      "sort-vars": 0, // sort variables within the same declaration block
      "space-before-blocks": [2, "always"], // require or disallow a space before blocks (fixable)
      "space-before-function-paren": [0, {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis (fixable)
      "space-in-parens": [0, "never"], // require or disallow spaces inside parentheses (fixable)
      "space-infix-ops": 2, // require spaces around operators (fixable)
      "space-unary-ops": [2, {"words": true, "nonwords": false}], // require or disallow spaces before/after unary operators (fixable)
      "spaced-comment": [0, "always"], // require or disallow a space immediately following the // or /* in a comment
      "wrap-regex": 0, // require regex literals to be wrapped in parentheses

      //
      // Best Practices
      //
      // These are rules designed to prevent you from making mistakes.
      // They either prescribe a better way of doing something or help you avoid footguns.
      "no-console": "off",
      "no-unused-labels": "off",

      //
      // ECMAScript 6
      //
      // These rules are only relevant to ES6 environments and are off by default.
      //
      "arrow-body-style": ["off", "as-needed"], // require braces in arrow function body
      "arrow-parens": [2, "as-needed"], // require parens in arrow function arguments
      "arrow-spacing": 2, // require space before/after arrow function's arrow (fixable)
      "constructor-super": 2, // verify calls of super() in constructors (recommended)
      "generator-star-spacing": [2, "before"], // enforce spacing around the * in generator functions (fixable)
      // stupid problem with redux-form hence disabling no-class-assign -- https://redux-form.com/7.1.2/docs/faq/howtoconnect.md/
      "no-class-assign": "off", // disallow modifying variables of class declarations (recommended)
      "no-confusing-arrow": 0, // disallow arrow functions where they could be confused with comparisons
      "no-const-assign": 2, // disallow modifying variables that are declared using const (recommended)
      "no-dupe-class-members": 2, // disallow duplicate name in class members (recommended)
      "no-new-symbol": 2, // disallow use of the new operator with the Symbol object (recommended)
      "no-this-before-super": 2, // disallow use of this/super before calling super() in constructors (recommended)
      "no-useless-constructor": 2, // disallow unnecessary constructor
      "no-var": 2, // require let or const instead of var
      "object-shorthand": 2, // require method and property shorthand syntax for object literals
      "prefer-arrow-callback": 2, // suggest using arrow functions as callbacks
      "prefer-const": 2, // suggest using const declaration for variables that are never modified after declared
      "prefer-reflect": 0, // suggest using Reflect methods where applicable
      "prefer-rest-params": 2, // suggest using the rest parameters instead of arguments
      "prefer-spread": 2, // suggest using the spread operator instead of .apply()
      "prefer-template": 2, // suggest using template literals instead of strings concatenation
      "require-yield": 2, // disallow generator functions that do not have yield
      "template-curly-spacing": 2, // enforce spacing around embedded expressions of template strings (fixable)
      "yield-star-spacing": 2, // enforce spacing around the * in yield* expressions (fixable)
      //
      // eslint-plugin-react
      //
      // List of supported rules
      //
      "react/display-name": 0, // Prevent missing displayName in a React component definition
      "react/forbid-prop-types": [2, {"forbid": ["any", "array"]}], // Forbid certain propTypes
      "react/no-danger": 2, // Prevent usage of dangerous JSX properties
      "react/no-deprecated": 2, // Prevent usage of deprecated methods
      "react/no-did-mount-set-state": 2, // Prevent usage of setState in componentDidMount
      "react/no-did-update-set-state": 2, // Prevent usage of setState in componentDidUpdate
      "react/no-direct-mutation-state": 2, // Prevent direct mutation of this.state
      "react/no-is-mounted": 2, // Prevent usage of isMounted
      "react/no-multi-comp": 0, // Prevent multiple component definition per file
      "react/no-set-state": 0, // Prevent usage of setState
      "react/no-string-refs": 2, // Prevent using string references in ref attribute.
      "react/no-unknown-property": 2, // Prevent usage of unknown DOM property (fixable)
      "react/prefer-es6-class": 0, // Enforce ES5 or ES6 class for React Components
      "react/prefer-stateless-function": 0, // Enforce stateless React Components to be written as a pure function
      "react/prop-types": "warn", // Prevent missing props validation in a React component definition
      "react/react-in-jsx-scope": 2, // Prevent missing React when using JSX
      //"react/require-extension": [1, {"extensions": [".js"]}], // Restrict file extensions that may be required
      "react/self-closing-comp": "warn", // Prevent extra closing tags for components without children
      "react/sort-comp": 2, // Enforce component methods order
      //"react/wrap-multilines": 2, // Prevent missing parentheses around multilines JSX (fixable)
      //
      // JSX-specific rules
      //
      "react/jsx-boolean-value": ["off", "always"], // Enforce boolean attributes notation in JSX (fixable)
      "react/jsx-closing-bracket-location": [2, {"selfClosing": "after-props", "nonEmpty": "after-props"}], // Validate closing bracket location in JSX
      "react/jsx-curly-spacing": [2, "never"], // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
      "react/jsx-equals-spacing": 2, // Enforce or disallow spaces around equal signs in JSX attributes
      "react/jsx-handler-names": [2, {"eventHandlerPrefix": "on", "eventHandlerPropPrefix": "on"}], // Enforce event handler naming conventions in JSX
      "react/jsx-indent-props": [2, 2], // Validate props indentation in JSX
      "react/jsx-indent": [2, 2], // Validate JSX indentation
      "react/jsx-key": 2, // Validate JSX has key prop when in array or iterator
      "react/jsx-max-props-per-line": [2, {"maximum": 4}], // Limit maximum of props on a single line in JSX
      "react/jsx-no-bind": [2, {"allowArrowFunctions": true}], // Prevent usage of .bind() and arrow functions in JSX props
      "react/jsx-no-duplicate-props": [2, {"ignoreCase": true}], // Prevent duplicate props in JSX
      "react/jsx-no-literals": 0, // Prevent usage of unwrapped JSX strings
      "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX
      "react/jsx-pascal-case": 2, // Enforce PascalCase for user-defined JSX components
      "react/jsx-sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting
      "react/jsx-sort-props": "off", // Enforce props alphabetical sorting
      "react/jsx-space-before-closing": [2, "always"], // Validate spacing before closing bracket in JSX (fixable)
      "react/jsx-uses-react": 2, // Prevent React to be incorrectly marked as unused
      "react/jsx-uses-vars": 2 // Prevent variables used in JSX to be incorrectly marked as unused
    }
}
